<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyrus&#39; blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-09T04:34:43.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cyrus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS KVO(键值观察) 总览</title>
    <link href="http://yoursite.com/2016/04/07/iOS-KVO-%E9%94%AE%E5%80%BC%E8%A7%82%E5%AF%9F-%E6%80%BB%E8%A7%88/"/>
    <id>http://yoursite.com/2016/04/07/iOS-KVO-键值观察-总览/</id>
    <published>2016-04-07T13:59:28.000Z</published>
    <updated>2016-04-09T04:34:43.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/heading-KVO.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文主要内容来自于对官方文档 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Key-Value Observing Programming Guide&lt;/a&gt; 的翻译，以及一部分我自己的理解和解释，如果有说错的地方请及时联系我。&lt;/p&gt;
&lt;h2 id=&quot;At-a-Glance&quot;&gt;&lt;a href=&quot;#At-a-Glance&quot; class=&quot;headerlink&quot; title=&quot;At a Glance&quot;&gt;&lt;/a&gt;At a Glance&lt;/h2&gt;&lt;p&gt;KVO 也就是 键值观察 ，它提供了一种机制，使得当某个对象特定的属性发生改变时能够通知到别的对象。这经常用于 model 和 controller 之间的通信。KVO主要的优点是你不需要在每次属性改变时手动去发送通知。并且它支持为一个属性注册多个观察者。&lt;/p&gt;
&lt;h2 id=&quot;注册-KVO&quot;&gt;&lt;a href=&quot;#注册-KVO&quot; class=&quot;headerlink&quot; title=&quot;注册 KVO&quot;&gt;&lt;/a&gt;注册 KVO&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被观察对象&lt;/strong&gt; 的属性必须是 &lt;a href=&quot;file:///Users/hcy/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.iOS.docset/Contents/Resources/Documents/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html#//apple_ref/doc/uid/20002178-BAJEAIEE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KVO Compliant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;必须用 &lt;strong&gt;被观察对象&lt;/strong&gt; 的 &lt;code&gt;addObserver:forKeyPath:options:context:&lt;/code&gt; 方法注册观察者&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察者&lt;/strong&gt; 必须实现 &lt;code&gt;observeValueForKeyPath:ofObject:change:context:&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;注册成为观察者&quot;&gt;&lt;a href=&quot;#注册成为观察者&quot; class=&quot;headerlink&quot; title=&quot;注册成为观察者&quot;&gt;&lt;/a&gt;注册成为观察者&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;为了能够在属性改变时被通知到，一个 &lt;strong&gt;观察者对象&lt;/strong&gt; 必须通过 &lt;strong&gt;被观察对象&lt;/strong&gt; 的&lt;code&gt;addObserver:forKeyPath:options:context:&lt;/code&gt; 方法注册成为观察者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;observer&lt;/code&gt; 参数也就是一个观察者对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keyPath&lt;/code&gt;  表示要观察的属性&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;options&lt;/code&gt;  决定了提供给观察者change字典中的具体信息有哪些。（change字典是一个提供给观察者的参数，后面会提到）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NSKeyValueObservingOptionOld&lt;/code&gt; 表示在change字典中包含了改变前的值。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSKeyValueObservingOptionNew&lt;/code&gt; 表示在change字典中包含新的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSKeyValueObservingOptionInitial&lt;/code&gt; 在注册观察者的方法return的时候就会发出一次通知。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSKeyValueObservingOptionPrior&lt;/code&gt; 会在值发生改变前发出一次通知，当然改变后的通知依旧还会发出，也就是每次change都会有两个通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context&lt;/code&gt; 这个参数可以是一个 C指针，也可以是一个 对象引用，它可以作为这个context的唯一标识，也可以提供一些数据给观察者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：  &lt;code&gt;addObserver:forKeyPath:options:context:&lt;/code&gt; 方法不会持有观察者对象，被观察对象，以及context的强引用。你要确保自己持有了他们的强引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;属性变化时接收通知&quot;&gt;&lt;a href=&quot;#属性变化时接收通知&quot; class=&quot;headerlink&quot; title=&quot;属性变化时接收通知&quot;&gt;&lt;/a&gt;属性变化时接收通知&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;当一个被观察属性的值发生改变时，观察者会收到 &lt;code&gt;observeValueForKeyPath:ofObject:change:context:&lt;/code&gt; 的消息。所有的观察者必须实现这个方法。这个方法中的参数和注册观察者方法的参数基本相同，只有一个 &lt;code&gt;change&lt;/code&gt; 不同。 &lt;code&gt;change&lt;/code&gt; 是一个字典，它里面包含了的信息由注册时的 &lt;code&gt;options&lt;/code&gt; 决定。&lt;/p&gt;
&lt;p&gt;官方提供了这些key给我们来取到 &lt;code&gt;change&lt;/code&gt; 中的value： &lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeKindKey&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeNewKey&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeOldKey&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeIndexesKey&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeNotificationIsPriorKey&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;NSKeyValueChangeKindKey&lt;/code&gt;&lt;/strong&gt; 这个key包含的value是一个 NSNumber 里面是一个 int，与之对应的是 &lt;code&gt;NSKeyValueChange&lt;/code&gt; 的枚举&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeSetting&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeInsertion&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeRemoval&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeReplacement&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSKeyValueChange&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 &lt;code&gt;change[NSKeyValueChangeKindKey]&lt;/code&gt; 是 &lt;code&gt;NSKeyValueChangeSetting&lt;/code&gt; 的时候，说明被观察属性的setter方法被调用了。&lt;br&gt;而下面三种，根据官方文档的意思是，当被观察属性是集合类型，且对它进行了 insert，remove，replace 操作的时候会返回这三种Key，但是我自己测试的时候没有测试出来😓不知道是不是我理解错了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;NSKeyValueChangeNewKey&lt;/code&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;code&gt;NSKeyValueChangeOldKey&lt;/code&gt;&lt;/strong&gt; 顾名思义，当你在注册的时候 &lt;code&gt;options&lt;/code&gt; 参数中填了对应的 &lt;code&gt;NSKeyValueObservingOptionNew&lt;/code&gt; 和 &lt;code&gt;NSKeyValueObservingOptionOld&lt;/code&gt; ，并且 &lt;code&gt;NSKeyValueChangeKindKey&lt;/code&gt; 的值是 &lt;code&gt;NSKeyValueChangeSetting&lt;/code&gt; ，你就可以通过这两个key取到 旧值和新值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;NSKeyValueChangeIndexesKey&lt;/code&gt;&lt;/strong&gt;， 当 &lt;code&gt;NSKeyValueChangeKindKey&lt;/code&gt; 的结果是 &lt;code&gt;NSKeyValueChangeInsertion&lt;/code&gt;, &lt;code&gt;NSKeyValueChangeRemoval&lt;/code&gt; 或 &lt;code&gt;NSKeyValueChangeReplacement&lt;/code&gt; 的时候，这个key的value是一个NSIndexSet，包含了发生insert，remove，replace的对象的索引集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;NSKeyValueChangeNotificationIsPriorKey&lt;/code&gt;&lt;/strong&gt;，这个key包含了一个 NSNumber，里面是一个布尔值，如果在注册时 &lt;code&gt;options&lt;/code&gt; 中有 &lt;code&gt;NSKeyValueObservingOptionPrior&lt;/code&gt;，那么在前一个通知中的 &lt;code&gt;change&lt;/code&gt; 中就会有这个key的value， 我们可以这样来判断是不是在改变前的通知&lt;code&gt;[change[NSKeyValueChangeNotificationIsPriorKey] boolValue] == YES;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;移除一个观察者&quot;&gt;&lt;a href=&quot;#移除一个观察者&quot; class=&quot;headerlink&quot; title=&quot;移除一个观察者&quot;&gt;&lt;/a&gt;移除一个观察者&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;你可以通过 &lt;code&gt;removeObserver:forKeyPath:&lt;/code&gt; 方法来移除一个观察。如果你的 &lt;code&gt;context&lt;/code&gt; 是一个 对象，你必须在移除观察之前持有它的强引用。当移除了观察后，观察者对象再也不会受到这个 keyPath 的通知。&lt;/p&gt;
&lt;h2 id=&quot;KVO-Compliance&quot;&gt;&lt;a href=&quot;#KVO-Compliance&quot; class=&quot;headerlink&quot; title=&quot;KVO Compliance&quot;&gt;&lt;/a&gt;KVO Compliance&lt;/h2&gt;&lt;p&gt;有两种方式能够保证 change notification 能够被发出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动通知，继承自NSObject，并且所有的属性符合&lt;a href=&quot;file:///Users/hcy/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.iOS.docset/Contents/Resources/Documents/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/Compliant.html#//apple_ref/doc/uid/20002172&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KVC规范&lt;/a&gt;这样就不用写额外的代码去实现自动通知。&lt;/li&gt;
&lt;li&gt;手动通知，让你的子类实现 &lt;code&gt;automaticallyNotifiesObserversForKey:&lt;/code&gt; 方法，来决定是否需要自动通知，如果是手动通知需要额外的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;自动通知&quot;&gt;&lt;a href=&quot;#自动通知&quot; class=&quot;headerlink&quot; title=&quot;自动通知&quot;&gt;&lt;/a&gt;自动通知&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt; NSObject 已经实现了自动通知，只要通过 setter 方法去赋值，或者通过 KVC 就可以通知到观察者。自动通知也支持集合代理对象，比如 mutableArrayValueForKey: 方法。&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// Call the accessor method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[account setName:&lt;span class=&quot;string&quot;&gt;@&quot;Savings&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use setValue:forKey:.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[account setValue:&lt;span class=&quot;string&quot;&gt;@&quot;Savings&quot;&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;name&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use a key path, where &#39;account&#39; is a kvc-compliant property of &#39;document&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[document setValue:&lt;span class=&quot;string&quot;&gt;@&quot;Savings&quot;&lt;/span&gt; forKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;account.name&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use mutableArrayValueForKey: to retrieve a relationship proxy object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transaction *newTransaction = &amp;lt;&lt;span class=&quot;meta&quot;&gt;#Create a new transaction for the account#&amp;gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *transactions = [account mutableArrayValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;transactions&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[transactions addObject:newTransaction];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;手动通知&quot;&gt;&lt;a href=&quot;#手动通知&quot; class=&quot;headerlink&quot; title=&quot;手动通知&quot;&gt;&lt;/a&gt;手动通知&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt; 手动通知提供了更自由的方式去决定什么时间，什么方式去通知观察者。这可以帮助你最少限度触发不必要的通知，或者一组改变值发出一个通知。想要使用手动通知必须实现&lt;code&gt;automaticallyNotifiesObserversForKey:&lt;/code&gt; 方法。(或者&lt;code&gt;automaticallyNotifiesObserversOfS&amp;lt;Key&amp;gt;&lt;/code&gt;)在一个类中同时使用自动和手动通知是可行的。对于想要手动通知的属性，可以根据它的keyPath返回NO，而其对于其他位置的keyPath，要返回父类的这个方法。&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; + (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)automaticallyNotifiesObserversForKey:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)theKey &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; automatic = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([theKey isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;openingBalance&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	    automatic = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	    automatic = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; automaticallyNotifiesObserversForKey:theKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	 	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	 	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; automatic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 要实现手动通知，你需要在值改变前调用 &lt;code&gt;willChangeValueForKey:&lt;/code&gt; 方法，在值改变后调用 &lt;code&gt;didChangeValueForKey:&lt;/code&gt; 方法。你可以在发送通知前检查值是否改变，如果没有改变就不发送通知&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; - (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setOpeningBalance:(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)theBalance &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (theBalance != _openingBalance) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	 [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;openingBalance&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	 _openingBalance = theBalance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	 [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;openingBalance&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	 	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 如果一个操作会导致多个属性改变，你需要嵌套通知，像下面这样：&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; - (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setOpeningBalance:(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)theBalance &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;openingBalance&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;itemChanged&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	 	_openingBalance = theBalance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	_itemChanged = _itemChanged+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;itemChanged&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;openingBalance&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 在一个一对多的关系中，你必须注意不仅仅是这个key改变了，还有它改变的类型以及索引。&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; - (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)removeTransactionsAtIndexes:(&lt;span class=&quot;built_in&quot;&gt;NSIndexSet&lt;/span&gt; *)indexes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChange:&lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeRemoval&lt;/span&gt; valuesAtIndexes:indexes forKey:&lt;span class=&quot;string&quot;&gt;@&quot;transactions&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   	&lt;span class=&quot;comment&quot;&gt;// Remove the transaction objects at the specified indexes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChange:&lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeRemoval&lt;/span&gt; valuesAtIndexes:indexes forKey:&lt;span class=&quot;string&quot;&gt;@&quot;transactions&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;键之间的依赖&quot;&gt;&lt;a href=&quot;#键之间的依赖&quot; class=&quot;headerlink&quot; title=&quot;键之间的依赖&quot;&gt;&lt;/a&gt;键之间的依赖&lt;/h2&gt;&lt;p&gt;在很多种情况下一个属性的值依赖于在其他对象中的属性。如果一个依赖属性的值改变了，这个属性也需要被通知到。&lt;/p&gt;
&lt;h3 id=&quot;To-one-Relationships&quot;&gt;&lt;a href=&quot;#To-one-Relationships&quot; class=&quot;headerlink&quot; title=&quot;To-one Relationships&quot;&gt;&lt;/a&gt;To-one Relationships&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;比如有一个教 &lt;code&gt;fullName&lt;/code&gt; 的属性，依赖于 &lt;code&gt;firstName&lt;/code&gt; 和 &lt;code&gt;lastName&lt;/code&gt;，当 &lt;code&gt;firstName&lt;/code&gt; 或者 &lt;code&gt;lastName&lt;/code&gt; 改变时，这个 &lt;code&gt;fullName&lt;/code&gt; 属性需要被通知到。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)fullName &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@ %@&quot;&lt;/span&gt;,firstName, lastName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以重写 &lt;code&gt;keyPathsForValuesAffectingValueForKey:&lt;/code&gt; 方法。其中要先调父类的这个方法拿到一个set，再做接下来的操作。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt; *)keyPathsForValuesAffectingValueForKey:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)key &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt; *keyPaths = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; keyPathsForValuesAffectingValueForKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([key isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;fullName&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *affectingKeys = @[&lt;span class=&quot;string&quot;&gt;@&quot;lastName&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;firstName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keyPaths = [keyPaths setByAddingObjectsFromArray:affectingKeys];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; keyPaths;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以通过实现 &lt;code&gt;keyPathsForValuesAffecting&amp;lt;Key&amp;gt;&lt;/code&gt; 方法来达到前面同样的效果，这里的&lt;key&gt;就是属性名，不过第一个字母要大写，用前面的例子来说就是这样：&lt;/key&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt; *)keyPathsForValuesAffectingFullName &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt; setWithObjects:&lt;span class=&quot;string&quot;&gt;@&quot;lastName&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;firstName&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;To-many-Relationships&quot;&gt;&lt;a href=&quot;#To-many-Relationships&quot; class=&quot;headerlink&quot; title=&quot;To-many Relationships&quot;&gt;&lt;/a&gt;To-many Relationships&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;keyPathsForValuesAffectingValueForKey:&lt;/code&gt;方法不能支持 to-many 的关系。举个例子，比如你有一个 Department 对象，和很多个 Employee 对象。而 Employee 有一个 salary 属性。你可能希望 Department 对象有一个 totalSalary 的属性，依赖于所有的 Employee 的 salary 。&lt;/p&gt;
&lt;p&gt;你可以注册 Department 成为所有 Employee 的观察者。当 Employee 被添加或者被移除时，你必须要添加和移除观察者。然后在 &lt;code&gt;observeValueForKeyPath:ofObject:change:context:&lt;/code&gt; 方法中，根据改变做出反馈。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)observeValueForKeyPath:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)keyPath ofObject:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)object change:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)change context:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)context &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (context == totalSalaryContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; updateTotalSalary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// deal with other observations and/or invoke super...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateTotalSalary &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setTotalSalary:[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; valueForKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;employees.@sum.salary&quot;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setTotalSalary:(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *)newTotalSalary &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (totalSalary != newTotalSalary) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;totalSalary&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _totalSalary = newTotalSalary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;totalSalary&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *)totalSalary &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _totalSalary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;KVO的实现细节&quot;&gt;&lt;a href=&quot;#KVO的实现细节&quot; class=&quot;headerlink&quot; title=&quot;KVO的实现细节&quot;&gt;&lt;/a&gt;KVO的实现细节&lt;/h2&gt;&lt;p&gt;KVO 的实现用了一种叫 &lt;strong&gt;&lt;code&gt;isa-swizzling&lt;/code&gt;&lt;/strong&gt; 的技术。isa 指针就是指向类的指针，当一个对象的一个属性注册了观察者后，被观察对象的isa指针的就指向了一个系统为我们生成的中间类，而不是我们自己创建的类。在这个类中，系统为我们重写了被观察属性的setter方法。你可以通过 &lt;code&gt;object_getClass(id obj)&lt;/code&gt; 方法获得对象真实的类,在 addObserver 前后分别打印，就可以看到isa指针被指向了一个中间类。似乎都是在原来的类名前面加上 &lt;code&gt;NSKVONotifying_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;isa指针不总是指向真实的类，所以你不应该依赖于 isa 指针来判断这个对象的类型，而应该通过 &lt;code&gt;class&lt;/code&gt; 方法来判断对象的类型。如果你还不知道什么是isa指针，可以看我之前写的博客 &lt;a href=&quot;http://blog.cyrusdev.com/2016/03/10/Objective-C-runtime-%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C runtime 的简单理解与使用&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/heading-KVO.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文主要内容来自于对官方文档 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA&quot;&gt;Key-Value Observing Programming Guide&lt;/a&gt; 的翻译，以及一部分我自己的理解和解释，如果有说错的地方请及时联系我。&lt;/p&gt;
&lt;h2 id=&quot;At-a-Glance&quot;&gt;&lt;a href=&quot;#At-a-Glance&quot; class=&quot;headerlink&quot; title=&quot;At a Glance&quot;&gt;&lt;/a&gt;At a Glance&lt;/h2&gt;&lt;p&gt;KVO 也就是 键值观察 ，它提供了一种机制，使得当某个对象特定的属性发生改变时能够通知到别的对象。这经常用于 model 和 controller 之间的通信。KVO主要的优点是你不需要在每次属性改变时手动去发送通知。并且它支持为一个属性注册多个观察者。&lt;/p&gt;
&lt;h2 id=&quot;注册-KVO&quot;&gt;&lt;a href=&quot;#注册-KVO&quot; class=&quot;headerlink&quot; title=&quot;注册 KVO&quot;&gt;&lt;/a&gt;注册 KVO&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;被观察对象&lt;/strong&gt; 的属性必须是 &lt;a href=&quot;file:///Users/hcy/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.iOS.docset/Contents/Resources/Documents/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html#//apple_ref/doc/uid/20002178-BAJEAIEE&quot;&gt;KVO Compliant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;必须用 &lt;strong&gt;被观察对象&lt;/strong&gt; 的 &lt;code&gt;addObserver:forKeyPath:options:context:&lt;/code&gt; 方法注册观察者&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察者&lt;/strong&gt; 必须实现 &lt;code&gt;observeValueForKeyPath:ofObject:change:context:&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="KVO" scheme="http://yoursite.com/tags/KVO/"/>
    
  </entry>
  
  <entry>
    <title>iOS 转场时 appear 与 disappear 的调用顺序探索</title>
    <link href="http://yoursite.com/2016/04/06/iOS-%E8%BD%AC%E5%9C%BA%E6%97%B6-appear-%E4%B8%8E-disappear-%E7%9A%84%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F%E6%8E%A2%E7%B4%A2/"/>
    <id>http://yoursite.com/2016/04/06/iOS-转场时-appear-与-disappear-的调用顺序探索/</id>
    <published>2016-04-06T13:41:52.000Z</published>
    <updated>2016-04-06T13:43:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/heading-Appear&amp;Disappear.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近几天看了好多人的面经，时不时就看到一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在A页面跳转到B页面的过程中 A 的 viewDidDisappear 方法和 B 的 viewDidAppear 谁先调用？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实我以前一直理所当然的认为它们的顺序就是 &lt;code&gt;A-viewDidDisappear&lt;/code&gt;  –&amp;gt; &lt;code&gt;B-viewDidAppear&lt;/code&gt;，至于为什么会这么想，就是感觉&lt;img src=&quot;http://7xs81e.com1.z0.glb.clouddn.com/%E4%B8%80%E8%84%B8%E6%87%B5%E9%80%BC.png&quot; ,=&quot;&quot; width=&quot;40&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天写了个Demo去测试了一下，发现完全不是自己想象的那样，每一种转场(Push,Present，TabBar切换)都是不一样的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Hcy91425/Demo/tree/master/Appear%26Disappear-Sample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo 地址 Appear&amp;amp;Disappear-Sample&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;我自定义了两个类，继承自UIViewController，为了方便观察分别叫做&lt;code&gt;A_ViewController&lt;/code&gt;,&lt;code&gt;B_ViewController&lt;/code&gt;，然后重写了一系列 &lt;code&gt;appear&lt;/code&gt; 和 &lt;code&gt;disappear&lt;/code&gt; 方法。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewWillAppear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;A  view will appear    %@&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidAppear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;A  view did  appear    %@&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillDisappear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewWillDisappear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;A  view will disappear %@&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidDisappear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidDisappear: animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;A  view did  disappear %@&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后分别用 push， present， 以及 tabbar 的切换来测试，然后查看打印的结果。&lt;/p&gt;
&lt;h3 id=&quot;Push-amp-Pop&quot;&gt;&lt;a href=&quot;#Push-amp-Pop&quot; class=&quot;headerlink&quot; title=&quot;Push &amp;amp; Pop&quot;&gt;&lt;/a&gt;Push &amp;amp; Pop&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;--------------------------PUSH-----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; A  view will disappear &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fa11067a730&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view will appear    &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fa110516530&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; A  view did  disappear &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fa11067a730&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view did  appear    &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fa110516530&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------POP-----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view will disappear &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fa110516530&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; A  view will appear    &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fa11067a730&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view did  disappear &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fa110516530&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; A  view did  appear    &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fa11067a730&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里的调用顺序是和我之前预想的一样的，也就是 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;A-willDisappear&lt;/code&gt; –&amp;gt; &lt;code&gt;B-willAppear&lt;/code&gt; –&amp;gt; &lt;code&gt;A-didDisappear&lt;/code&gt; –&amp;gt; &lt;code&gt;B-didAppear&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Present-amp-Dismiss&quot;&gt;&lt;a href=&quot;#Present-amp-Dismiss&quot; class=&quot;headerlink&quot; title=&quot;Present &amp;amp; Dismiss&quot;&gt;&lt;/a&gt;Present &amp;amp; Dismiss&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在模态的转场中就有一些不一样的事了。我们知道模态转场有好多种style，其中有两种我们需要特别注意的&lt;code&gt;UIModalPresentationCustom&lt;/code&gt;,&lt;code&gt;UIModalPresentationOverFullScreen&lt;/code&gt;。我们先看一下除了这两种style以外的转场，他们的调用顺序是怎样的。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-----------------------NormalPresent------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; A  view will disappear &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fc2a14ac490&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view will appear    &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fc2a152a880&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view did  appear    &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fc2a152a880&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; A  view did  disappear &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fc2a14ac490&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------DISMISS----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view will disappear &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fc2a152a880&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; A  view will appear    &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fc2a14ac490&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; A  view did  appear    &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fc2a14ac490&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view did  disappear &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7fc2a152a880&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里其实已经和push的转场不一样了。普通模态的转场的顺序是这样的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A-willDisappear&lt;/code&gt; –&amp;gt; &lt;code&gt;B-willAppear&lt;/code&gt; –&amp;gt; &lt;code&gt;B-didAppear&lt;/code&gt; –&amp;gt; &lt;code&gt;A-didDisappear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再看看前面提到的那两种特殊的模态转场。因为在这两种方式的转场下A的view是不会消失的，所以所有与A有关的 appear 或 disappear 方法都不会被调用&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-----------------------CustomPresent------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view will appear    &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7f960249bac0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view did  appear    &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7f960249bac0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------DISMISS----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view will disappear &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7f960249bac0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B  view did  disappear &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7f960249bac0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以在这两种style下只有&lt;code&gt;B-willAppear&lt;/code&gt; –&amp;gt; &lt;code&gt;B-didAppear&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;TabBar切换&quot;&gt;&lt;a href=&quot;#TabBar切换&quot; class=&quot;headerlink&quot; title=&quot;TabBar切换&quot;&gt;&lt;/a&gt;TabBar切换&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;TabBar 的切换也是一个很神奇的顺序&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B  view will appear    &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7f88cbed7160&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A  view will disappear &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7f88cbed6680&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A  view did  disappear &amp;lt;A_ViewController: &lt;span class=&quot;number&quot;&gt;0x7f88cbed6680&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B  view did  appear    &amp;lt;B_ViewController: &lt;span class=&quot;number&quot;&gt;0x7f88cbed7160&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与push不同的是，TabBar下，会先调用 B 的 willAppear，再调用 A 的 willDisappear&lt;/p&gt;
&lt;p&gt;所以TabBar的顺序是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;B-willAppear&lt;/code&gt; –&amp;gt; &lt;code&gt;A-willDisappear&lt;/code&gt; –&amp;gt; &lt;code&gt;A-didDisappear&lt;/code&gt; –&amp;gt; &lt;code&gt;B-didAppear&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在每一种转场下，appear 与 disappear 都有一些不一样的顺序，一定要分清楚，不能一概而论。&lt;/p&gt;
&lt;p&gt;Push： &lt;code&gt;A-willDisappear&lt;/code&gt;–&amp;gt;&lt;code&gt;B-willAppear&lt;/code&gt;–&amp;gt;&lt;code&gt;A-didDisappear&lt;/code&gt;–&amp;gt;&lt;code&gt;B-didAppear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Present： &lt;code&gt;A-willDisappear&lt;/code&gt;–&amp;gt;&lt;code&gt;B-willAppear&lt;/code&gt;–&amp;gt;&lt;code&gt;B-didAppear&lt;/code&gt;–&amp;gt;&lt;code&gt;A-didDisappear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;CustomPresent： &lt;code&gt;B-willAppear&lt;/code&gt;–&amp;gt;&lt;code&gt;B-didAppear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;TabBar： &lt;code&gt;B-willAppear&lt;/code&gt;–&amp;gt;&lt;code&gt;A-willDisappear&lt;/code&gt;–&amp;gt;&lt;code&gt;A-didDisappear&lt;/code&gt;–&amp;gt;&lt;code&gt;B-didAppear&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;疑惑&quot;&gt;&lt;a href=&quot;#疑惑&quot; class=&quot;headerlink&quot; title=&quot;疑惑&quot;&gt;&lt;/a&gt;疑惑&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;为什么要把这个过程弄的这么复杂？目前还没有想法，如果有知道的朋友，希望告知。&lt;img src=&quot;http://7xs81e.com1.z0.glb.clouddn.com/%E4%B8%80%E8%84%B8%E6%87%B5%E9%80%BC.png&quot; ,=&quot;&quot; width=&quot;40&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src = &quot;http://7xrpns.com1.z0.glb.clouddn.com/heading-Appear&amp;Disappear.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近几天看了好多人的面经，时不时就看到一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在A页面跳转到B页面的过程中 A 的 viewDidDisappear 方法和 B 的 viewDidAppear 谁先调用？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实我以前一直理所当然的认为它们的顺序就是 &lt;code&gt;A-viewDidDisappear&lt;/code&gt;  –&amp;gt; &lt;code&gt;B-viewDidAppear&lt;/code&gt;，至于为什么会这么想，就是感觉&lt;img src=&quot;http://7xs81e.com1.z0.glb.clouddn.com/%E4%B8%80%E8%84%B8%E6%87%B5%E9%80%BC.png&quot;, width = 40&gt;&lt;/p&gt;
&lt;p&gt;今天写了个Demo去测试了一下，发现完全不是自己想象的那样，每一种转场(Push,Present，TabBar切换)都是不一样的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Hcy91425/Demo/tree/master/Appear%26Disappear-Sample&quot;&gt;Demo 地址 Appear&amp;amp;Disappear-Sample&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UIKit 学习" scheme="http://yoursite.com/categories/UIKit-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="viewDidAppear" scheme="http://yoursite.com/tags/viewDidAppear/"/>
    
  </entry>
  
  <entry>
    <title>初次接触 RunLoop</title>
    <link href="http://yoursite.com/2016/03/24/%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6-RunLoop/"/>
    <id>http://yoursite.com/2016/03/24/初次接触-RunLoop/</id>
    <published>2016-03-24T03:24:25.000Z</published>
    <updated>2016-03-24T03:26:09.000Z</updated>
    
    <content type="html">&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/heading-RunLoop.png&quot;&gt;&lt;/div&gt;

&lt;p&gt;最近看了两位大神关于RunLoop的一些资料，对RunLoop算是有了一个初步的认识，在这里整理总结一下自己对于RunLoop的理解。如果我有理解错的地方，希望大家帮我指出。我看的是 &lt;a href=&quot;http://weibo.com/239801242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ibireme&lt;/a&gt; 的博客和 &lt;a href=&quot;http://weibo.com/u/1364395395&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@我就叫Sunny怎么了&lt;/a&gt; 的视频，链接在下面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ibireme.com/2015/05/18/runloop/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解RunLoop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XODgxODkzODI0.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS线下分享《RunLoop》by 孙源@sunnyxx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是RunLoop&quot;&gt;&lt;a href=&quot;#什么是RunLoop&quot; class=&quot;headerlink&quot; title=&quot;什么是RunLoop&quot;&gt;&lt;/a&gt;什么是RunLoop&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;说白了就是一个循环，能够让整个程序一直运行着不会退出，接收用户的信息。当然这个循环是一个十分复杂的循环。&lt;/p&gt;
&lt;h2 id=&quot;RunLoop与线程的关系&quot;&gt;&lt;a href=&quot;#RunLoop与线程的关系&quot; class=&quot;headerlink&quot; title=&quot;RunLoop与线程的关系&quot;&gt;&lt;/a&gt;RunLoop与线程的关系&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;每个线程有一个自己的main函数，当这个main函数执行完后这个线程也就没了。所以我们需要给这个线程创建一个 RunLoop。但是在线程创建的时候并没有 RunLoop ，只有当我们第一次去获取这个线程的 RunLoop 时，才会创建。&lt;/p&gt;
&lt;h2 id=&quot;RunLoop的结构&quot;&gt;&lt;a href=&quot;#RunLoop的结构&quot; class=&quot;headerlink&quot; title=&quot;RunLoop的结构&quot;&gt;&lt;/a&gt;RunLoop的结构&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;每个 RunLoop 中有一个集合其中存放了若干个 Mode，一个 RunLoop 只能在一种 Mode 下运行，如果需要切换那么久要退出 Loop 再重新指定一个 Mode 进入。每个 Mode 中又有若干个 item ，总共有三类，分别是 &lt;code&gt;Source&lt;/code&gt;,&lt;code&gt;Timer&lt;/code&gt;,&lt;code&gt;Observer&lt;/code&gt;。先说简单的&lt;/p&gt;
&lt;h3 id=&quot;Timer&quot;&gt;&lt;a href=&quot;#Timer&quot; class=&quot;headerlink&quot; title=&quot;Timer&quot;&gt;&lt;/a&gt;Timer&lt;/h3&gt;&lt;p&gt;Timer 就是一个定时器，我们平时使用 NSTimer 与它紧密相关。它包含一个时间长度和一个作为回调的函数指针，当它加入到 RunLoop 后，每次到那个时间点，就会执行一次回调。&lt;/p&gt;
&lt;h3 id=&quot;Observer&quot;&gt;&lt;a href=&quot;#Observer&quot; class=&quot;headerlink&quot; title=&quot;Observer&quot;&gt;&lt;/a&gt;Observer&lt;/h3&gt;&lt;p&gt;Observer 就是观察者，它也包含一个回调，当 RunLoop 的状态改变时，就会执行这个回调。RunLoop 有以下几种状态:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CF_OPTIONS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(CFOptionFlags, CFRunLoopActivity)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFRunLoopEntry         = (&lt;span class=&quot;number&quot;&gt;1U&lt;/span&gt;L &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFRunLoopBeforeTimers  = (&lt;span class=&quot;number&quot;&gt;1U&lt;/span&gt;L &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFRunLoopBeforeSources = (&lt;span class=&quot;number&quot;&gt;1U&lt;/span&gt;L &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFRunLoopBeforeWaiting = (&lt;span class=&quot;number&quot;&gt;1U&lt;/span&gt;L &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFRunLoopAfterWaiting  = (&lt;span class=&quot;number&quot;&gt;1U&lt;/span&gt;L &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFRunLoopExit          = (&lt;span class=&quot;number&quot;&gt;1U&lt;/span&gt;L &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Source&quot;&gt;&lt;a href=&quot;#Source&quot; class=&quot;headerlink&quot; title=&quot;Source&quot;&gt;&lt;/a&gt;Source&lt;/h3&gt;&lt;p&gt;Source就比较难理解了。反正我自己没有弄明白，还是引用一下&lt;a href=&quot;http://weibo.com/239801242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ibireme&lt;/a&gt;的原话吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CFRunLoopSourceRef 是事件产生的地方。Source有两个版本：Source0 和 Source1。&lt;/p&gt;
&lt;p&gt;Source0 只包含了一个回调（函数指针），它并不能主动触发事件。使用时，你需要先调用 CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。&lt;/p&gt;
&lt;p&gt;Source1 包含了一个 mach_port 和一个回调（函数指针），被用于通过内核和其他线程相互发送消息。这种 Source 能主动唤醒 RunLoop 的线程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;CFRunLoopMode-和-CFRunLoop-的结构&quot;&gt;&lt;a href=&quot;#CFRunLoopMode-和-CFRunLoop-的结构&quot; class=&quot;headerlink&quot; title=&quot;CFRunLoopMode 和 CFRunLoop 的结构&quot;&gt;&lt;/a&gt;CFRunLoopMode 和 CFRunLoop 的结构&lt;/h3&gt;&lt;p&gt;我觉得看了下面这两个结构体后，对于 RunLoop 的理解会明朗很多。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __CFRunLoopMode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFStringRef _name;            &lt;span class=&quot;comment&quot;&gt;// Mode Name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFMutableSetRef _sources0;    &lt;span class=&quot;comment&quot;&gt;// Set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFMutableSetRef _sources1;    &lt;span class=&quot;comment&quot;&gt;// Set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFMutableArrayRef _observers; &lt;span class=&quot;comment&quot;&gt;// Array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFMutableArrayRef _timers;    &lt;span class=&quot;comment&quot;&gt;// Array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __CFRunLoop &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFMutableSetRef _commonModes;     &lt;span class=&quot;comment&quot;&gt;// Set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFMutableSetRef _commonModeItems; &lt;span class=&quot;comment&quot;&gt;// Set&amp;lt;Source/Observer/Timer&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRunLoopModeRef _currentMode;    &lt;span class=&quot;comment&quot;&gt;// Current Runloop Mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFMutableSetRef _modes;           &lt;span class=&quot;comment&quot;&gt;// Set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;__CFRunLoop&lt;/code&gt; 中有一个 &lt;code&gt;_modes&lt;/code&gt; 用来存放这个 RunLoop 中的所有 Mode。还有一个 &lt;code&gt;_currentMode&lt;/code&gt; 用来标记当前的 Mode。而在 &lt;code&gt;_CFRunLoopMode&lt;/code&gt; 中除了 &lt;code&gt;_name&lt;/code&gt; 就是那三种 item，应该很容易看出来。&lt;/p&gt;
&lt;p&gt;需要一提的是在 &lt;code&gt;__CGRunLoop&lt;/code&gt; 中有 &lt;code&gt;CFMutableSetRef _commonModes;&lt;/code&gt; &lt;code&gt;CFMutableSetRef _commonModeItems;&lt;/code&gt; 这个两个结构。我们可以把一个 Mode 标记为 &lt;code&gt;Common&lt;/code&gt;。 这样每次 RunLoop 内容改变时都会把 _commonModeItems 里的 items 全部同步到标记了 Common 的 Mode 中。在后面讲 timer 的例子时我们还会再提到。&lt;/p&gt;
&lt;h3 id=&quot;RunLoop-的内部逻辑&quot;&gt;&lt;a href=&quot;#RunLoop-的内部逻辑&quot; class=&quot;headerlink&quot; title=&quot;RunLoop 的内部逻辑&quot;&gt;&lt;/a&gt;RunLoop 的内部逻辑&lt;/h3&gt;&lt;p&gt;还是引用一下&lt;a href=&quot;http://weibo.com/239801242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ibireme&lt;/a&gt;的图片，十分的直观明了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/RunLoop_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;RunLoop-应用&quot;&gt;&lt;a href=&quot;#RunLoop-应用&quot; class=&quot;headerlink&quot; title=&quot;RunLoop 应用&quot;&gt;&lt;/a&gt;RunLoop 应用&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;NSTimer&quot;&gt;&lt;a href=&quot;#NSTimer&quot; class=&quot;headerlink&quot; title=&quot;NSTimer&quot;&gt;&lt;/a&gt;NSTimer&lt;/h3&gt;&lt;p&gt;在我刚刚学 iOS 的时候，一次偶然知道了 NSTimer 这个东西后，高兴的用它模仿了一个系统的计时器。源码在一次整理的时候被我删了。。只能看看截图了：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/timer1.PNG&quot; ,=&quot;&quot; width=&quot;500&quot;&gt;&lt;/div&gt;

&lt;p&gt;本来挺开心的，结果一滚动下面的表格，WHAT？！计时器怎么不动了？？ &lt;img src=&quot;http://7xs81e.com1.z0.glb.clouddn.com/%E4%B8%80%E8%84%B8%E6%87%B5%E9%80%BC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;后来也查了解决办法，不过一直没搞懂为什么。现在知道了 RunLoop 后总算是明白了。&lt;/p&gt;
&lt;p&gt;在主线程中有预置两个 Mode，一个是 Default，还有一个就是 UITrackingRunLoopMode，并且这两个Mode都标记了 Common。这个 Mode 在 ScrollView 滚动时会切换，用来保证滚动的流畅。而我们注册 timer 使用的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_timer = [&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(timerAction) userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会默认把这个 timer 注册到当前 RunLoop 的 DefaultMode 中，那么滚动的时候 Mode 一切换 timer 很显然就没法工作了。解决办法也很容易，可以分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;把timer注册到&lt;code&gt;UITrackingRunLoopMode&lt;/code&gt;或者&lt;code&gt;NSRunLoopCommonModes&lt;/code&gt;(添加到 CommonModes 中就相当于自动添加到了&lt;code&gt;UITrackingRunLoopMode&lt;/code&gt;)。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 二选一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop] addTimer:_timer forMode:&lt;span class=&quot;built_in&quot;&gt;UITrackingRunLoopMode&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop] addTimer:_timer forMode:&lt;span class=&quot;built_in&quot;&gt;NSRunLoopCommonModes&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把timer添加到子线程的 RunLoop 中，不管是什么Mode都不会影响到主线程&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.cyrusdev.queue&quot;&lt;/span&gt;, DISPATCH_QUEUE_CONCURRENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       _timer = [&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(timerAction) userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [[&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop] run]; &lt;span class=&quot;comment&quot;&gt;// 一定要在注册timer之后让 RunLoop 跑起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我写了一个Demo，地址在这里，可以感受一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Hcy91425/Demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RunLoopDemo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;AutoreleasePool&quot;&gt;&lt;a href=&quot;#AutoreleasePool&quot; class=&quot;headerlink&quot; title=&quot;AutoreleasePool&quot;&gt;&lt;/a&gt;AutoreleasePool&lt;/h3&gt;&lt;p&gt;在 App 启动后，系统会在主线程的 RunLoop 里注册两个 Observer。&lt;/p&gt;
&lt;p&gt;第一个 Observer 监听 &lt;code&gt;kCFRunLoopEntry&lt;/code&gt; 也就是即将进入 RunLoop 的状态，在这里会创建一个自动释放池。&lt;/p&gt;
&lt;p&gt;第二个 Observer 监听 &lt;code&gt;kCFRunLoopBeforeWaiting&lt;/code&gt; 以及 &lt;code&gt;kCFRunLoopExit&lt;/code&gt; 两个状态。在 RunLoop 即将进入休眠时释放旧池，创建新池。在 RunLoop 要退出时释放池子。&lt;/p&gt;
&lt;h3 id=&quot;让一个子线程一直运行&quot;&gt;&lt;a href=&quot;#让一个子线程一直运行&quot; class=&quot;headerlink&quot; title=&quot;让一个子线程一直运行&quot;&gt;&lt;/a&gt;让一个子线程一直运行&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 创建子线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.thread = [[&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(threadMain) object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.thread start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)threadMain &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; currentThread] setName:&lt;span class=&quot;string&quot;&gt;@&quot;myThread&quot;&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; *runLoop = [&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [runLoop addPort:[&lt;span class=&quot;built_in&quot;&gt;NSMachPort&lt;/span&gt; port] forMode:&lt;span class=&quot;built_in&quot;&gt;NSDefaultRunLoopMode&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [runLoop run];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我在 myThread 线程中创建了一个 RunLoop，这个线程就不会自动销毁了。我们可以暂停程序看一下它的线程堆栈：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/%E7%BA%BF%E7%A8%8B%E5%A0%86%E6%A0%88.png&quot; ,=&quot;&quot; width=&quot;500&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;对于 RunLoop 的了解其实还很浅，只能有一个大概的结构，不过了解了这些内容对于整个App运行的过程还是会更加深入一些了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/heading-RunLoop.png&quot;&gt;&lt;/div&gt;

&lt;p&gt;最近看了两位大神关于RunLoop的一些资料，对RunLoop算是有了一个初步的认识，在这里整理总结一下自己对于RunLoop的理解。如果我有理解错的地方，希望大家帮我指出。我看的是 &lt;a href=&quot;http://weibo.com/239801242&quot;&gt;@ibireme&lt;/a&gt; 的博客和 &lt;a href=&quot;http://weibo.com/u/1364395395&quot;&gt;@我就叫Sunny怎么了&lt;/a&gt; 的视频，链接在下面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ibireme.com/2015/05/18/runloop/&quot;&gt;深入理解RunLoop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XODgxODkzODI0.html&quot;&gt;iOS线下分享《RunLoop》by 孙源@sunnyxx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="RunLoop" scheme="http://yoursite.com/tags/RunLoop/"/>
    
  </entry>
  
  <entry>
    <title>iOS 自定义转场动画 初窥</title>
    <link href="http://yoursite.com/2016/03/18/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB-%E5%88%9D%E7%AA%A5/"/>
    <id>http://yoursite.com/2016/03/18/iOS-自定义转场动画-初窥/</id>
    <published>2016-03-18T08:55:42.000Z</published>
    <updated>2016-03-24T03:29:52.000Z</updated>
    
    <content type="html">&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/heading-customTransition.png&quot;&gt;&lt;/div&gt;

&lt;p&gt;这两天学习了一下自定义转场动画的内容，刚开始看的时候被这几个又长又很相似的协议弄的晕头转向，所以希望能写一篇浅显易懂的入门文章。本文的内容会比较基础，不会涉及的很深的，就像题目说的&lt;code&gt;初窥&lt;/code&gt;。通过本文可以用最简单的方式实现最简单的自定义转场动画。如果你需要更加深入的知识，可以参考官方文档。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/featuredarticles/ViewControllerPGforiPhoneOS/CustomizingtheTransitionAnimations.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Customizing the Transition Animations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文中的 Demo 可以从 &lt;a href=&quot;https://github.com/Hcy91425/Demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; 下载&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在讲主要的内容之前我们需要分清几个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;presentingViewController&lt;/li&gt;
&lt;li&gt;presentedViewController&lt;/li&gt;
&lt;li&gt;fromViewController&lt;/li&gt;
&lt;li&gt;toViewController&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;presentingVC&lt;/code&gt;和&lt;code&gt;presentedVC&lt;/code&gt;的概念比较容易理解，前者就是 &lt;strong&gt;执行present&lt;/strong&gt; 动作的那个控制器，而后者就是 &lt;strong&gt;被present&lt;/strong&gt; 的那个控制器，这两个控制器的身份是始终不会改变的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fromVC&lt;/code&gt;和&lt;code&gt;toVC&lt;/code&gt;是个相对的概念，在执行 &lt;strong&gt;present&lt;/strong&gt; 的时候&lt;code&gt;presentingVC&lt;/code&gt;就是&lt;code&gt;fromVC&lt;/code&gt;，而&lt;code&gt;presentedVC&lt;/code&gt;就是&lt;code&gt;toVC&lt;/code&gt;。在 &lt;strong&gt;dismiss&lt;/strong&gt; 的时候就要反一反了&lt;code&gt;presentedVC&lt;/code&gt;是&lt;code&gt;fromVC&lt;/code&gt;,而&lt;code&gt;presentingVC&lt;/code&gt;是&lt;code&gt;toVC&lt;/code&gt;。官方有一张图是这样的：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/from&amp;to.png&quot; width=&quot;400&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;普通-view-controller-自定义转场&quot;&gt;&lt;a href=&quot;#普通-view-controller-自定义转场&quot; class=&quot;headerlink&quot; title=&quot;普通 view controller 自定义转场&quot;&gt;&lt;/a&gt;普通 view controller 自定义转场&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;我们先以普通的 view controller 为例子，讲 present 和 dismiss 的转场。往简单了说，我们只需要知道 3 个协议就可以实现自定义转场。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIViewControllerContextTransitioning&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIViewControllerTransitioningDelegate&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个协议&lt;code&gt;UIViewControllerContextTransitioning&lt;/code&gt; 实现了这个协议的对象，我它为&lt;code&gt;转场上下文&lt;/code&gt;，一般来说，转场上下文不用我们自己实现，由系统提供给我们。通过它，我们可以获取到很多转场相关的信息。这里我只列举几个重要的属性或方法，其他的看名字和注释也能很容易知道它们的用途：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 所有要执行动画的 view 都要加入到 containerView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)containerView;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过 key 来返回转场前，转场后的 view controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// UITransitionContextFromViewControllerKey&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// UITransitionContextToViewControllerKey&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)viewControllerForKey:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可以得到参与转场的 view controller 起始和结束时的 frame，一般来说通过 fromVC 的到起始的，通过 toVC 的到结束时的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)initialFrameForViewController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)vc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)finalFrameForViewController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)vc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在转场动画结束，或者取消时要通知系统是否完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)completeTransition:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)didComplete;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二个协议&lt;code&gt;UIViewControllerAnimatedTransitioning&lt;/code&gt; 负责的是转场动画的内容，我把实现了这个协议的对象称作&lt;code&gt;动画控制器&lt;/code&gt;。它有两个必须实现的方法：&lt;code&gt;- (NSTimeInterval)transitionDuration:&lt;/code&gt;和&lt;code&gt;- (void)animateTransition:&lt;/code&gt;。第一个方法用来返回动画的时长，而第二个方法就是实现动画的过程，它有一个参数，这个参数就是一个&lt;code&gt;转场上下文&lt;/code&gt;，通过这个参数我们可以取到很多转场的信息，然后进行动画。&lt;/p&gt;
&lt;p&gt;第三个协议&lt;code&gt;UIViewControllerTransitioningDelegate&lt;/code&gt; 我们需设置&lt;code&gt;presentedVC&lt;/code&gt;的&lt;code&gt;transitioningDelegate&lt;/code&gt;属性为一个实现了这个协议的对象。我们现在只要先关注这个协议的两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回 present 动画控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animationControllerForPresentedController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)presented presentingController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)presenting sourceController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)source;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回 dismiss 动画控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animationControllerForDismissedController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)dismissed;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以把 present 和 dismiss 动画控制器写成一个对象，在内部通过一些逻辑判断来执行对应的动画，当然也可以分成两个对象。&lt;/p&gt;
&lt;p&gt;在知道了上面这些内容后，我们就可以一起来写一个 demo 来学习自定义转场动画了。&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;先写两个 view controller，分别是 presentingVC 和 presentedVC，内容基本上是一样的，我就不贴两份了。只有&lt;code&gt;buttonClicked&lt;/code&gt;方法不一样，一个是 present， 一个是 dismiss。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PresentingViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *button = [&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; buttonWithType:&lt;span class=&quot;built_in&quot;&gt;UIButtonTypeSystem&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button.bounds = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button.center = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [button setTitle:&lt;span class=&quot;string&quot;&gt;@&quot;present view controller&quot;&lt;/span&gt; forState:&lt;span class=&quot;built_in&quot;&gt;UIControlStateNormal&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [button addTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(buttonClicked) forControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:button];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)buttonClicked &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PresentedViewController *presentedVC = [PresentedViewController new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; presentViewController:presentedVC animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ----- in PresentedViewController.m -----&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)buttonClicked &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成这些后我们的程序就能实现转场了，只不过是系统默认的转场方式。接下来，我们要写一个自己的动画控制器，为了区分和系统的动画，我们的动画选择&lt;code&gt;从上往下&lt;/code&gt;划出的转场方式。我们新建一个类，让它遵循&lt;code&gt;UIViewControllerAnimatedTransitioning&lt;/code&gt;协议。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AnimationController.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnimationController&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AnimationController.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnimationController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 转场的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt;)transitionDuration:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerContextTransitioning&lt;/span&gt;&amp;gt;)transitionContext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 转场动画实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)animateTransition:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerContextTransitioning&lt;/span&gt;&amp;gt;)transitionContext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 通过 key 取到 fromVC 和 toVC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *fromVC = [transitionContext viewControllerForKey:&lt;span class=&quot;built_in&quot;&gt;UITransitionContextFromViewControllerKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *toVC = [transitionContext viewControllerForKey:&lt;span class=&quot;built_in&quot;&gt;UITransitionContextToViewControllerKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 把 toVC 加入到 containerView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *containerView = [transitionContext containerView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [containerView addSubview:toVC.view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 一些动画要用的的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; finalFrame = [transitionContext finalFrameForViewController:toVC];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; duration = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; transitionDuration:transitionContext];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 动画过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (toVC.isBeingPresented) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toVC.view.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectOffset&lt;/span&gt;(finalFrame, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, -finalFrame.size.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             toVC.view.frame = finalFrame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         completion:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;comment&quot;&gt;// 结束后要通知系统&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             [transitionContext completeTransition:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fromVC.isBeingDismissed) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [containerView sendSubviewToBack:toVC.view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             fromVC.view.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectOffset&lt;/span&gt;(finalFrame, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, -finalFrame.size.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         completion:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;comment&quot;&gt;// dismiss 动画添加了手势后可能出现转场取消的状态，所以要根据状态来判定是否完成转场&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; isComplete = ![transitionContext transitionWasCancelled];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             [transitionContext completeTransition:isComplete];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;第一个方法，我们返回了动画的时间 0.8 秒&lt;/li&gt;
&lt;li&gt;第二个方法&lt;ul&gt;
&lt;li&gt;先通过 key 取到 fromVC 和 toVC。&lt;/li&gt;
&lt;li&gt;然后把 toVC 的 view 加入到 containerView 中 ，fromVC 的 view 是本来就在 containerView 中的&lt;/li&gt;
&lt;li&gt;动画的过程分为两块，分别是 present 动画 和 dismiss 动画，我们可以通过 UIViewController 自带的 &lt;code&gt;isBeingPresented&lt;/code&gt; 和  &lt;code&gt;isBeingDismissed&lt;/code&gt; 属性来判断当前是那种类型的转场。动画的过程就可以自己发挥想象力了。在动画结束后要通知系统完成转场，这里要注意的是，因为稍后我们要给 dismiss 添加手势驱动，所以转场存在取消的可能，所以我们通过&lt;code&gt;[transitionContext transitionWasCancelled]&lt;/code&gt;来得到转场的状态，再判断是否通知系统转场完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后一步，我们要通过&lt;code&gt;UIViewControllerTransitioningDelegate&lt;/code&gt;把&lt;code&gt;动画控制器&lt;/code&gt;和&lt;code&gt;视图控制器&lt;/code&gt;联系起来。我们要给&lt;code&gt;PresentingViewController&lt;/code&gt;添加一些内容。&lt;/p&gt;
&lt;p&gt;先让 &lt;code&gt;presentingVC&lt;/code&gt; 遵循 &lt;code&gt;UIViewControllerTransitioningDelegate&lt;/code&gt; 协议，并且添加一个属性。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PresentingViewController&lt;/span&gt; ()&amp;lt;&lt;span class=&quot;title&quot;&gt;UIViewControllerTransitioningDelegate&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 动画控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt; animationController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在&lt;code&gt;- (void)viewDidLoad&lt;/code&gt;中初始化动画控制器 &lt;code&gt;_animationController = [AnimationController new];&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 初始化动画控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _animationController = [AnimationController new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着在 &lt;code&gt;- (void)buttonClicked&lt;/code&gt;方法中设置&lt;code&gt;presentedVC&lt;/code&gt;的代理&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)buttonClicked &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PresentedViewController *presentedVC = [PresentedViewController new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置 presented view controller 的转场代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    presentedVC.transitioningDelegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; presentViewController:presentedVC animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后添加两个代理方法&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回 present 动画控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animationControllerForPresentedController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)presented presentingController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)presenting sourceController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)source &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _animationController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回 dismiss 动画控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animationControllerForDismissedController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)dismissed &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _animationController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此，我们已经完成了一个自定义的转场动画了😀&lt;/p&gt;
&lt;h3 id=&quot;注意点&quot;&gt;&lt;a href=&quot;#注意点&quot; class=&quot;headerlink&quot; title=&quot;注意点&quot;&gt;&lt;/a&gt;注意点&lt;/h3&gt;&lt;p&gt;presentedVC 的 modalPresentationStyle 默认为&lt;code&gt;UIModalPresentationFullScreen&lt;/code&gt;,这种情况下在转场完成后系统会自动隐藏 presentingVC 的 view 。如果我们设置了 &lt;code&gt;UIModalPresentationCustom&lt;/code&gt;那么转场完成后，presentingVC 的 view 不会隐藏。一般来说在动画的时候我们都会把 toVC 的 view 加入到 containerView 中，在这种模式下执行 dismiss 的时候我们不能把 toVC.view（presentingVC.view） 加入到 containerView 中，因为这个 view 并由系统额外管理，如果我们改变了它，那就有可能把从原来的视图层次中移除而导致它消失不见。&lt;/p&gt;
&lt;h3 id=&quot;交互式转场&quot;&gt;&lt;a href=&quot;#交互式转场&quot; class=&quot;headerlink&quot; title=&quot;交互式转场&quot;&gt;&lt;/a&gt;交互式转场&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;实现交互式的转场需要在&lt;code&gt;UIViewControllerTransitioningDelegate&lt;/code&gt;的协议方法中返回一个实现了&lt;code&gt;UIViewControllerInteractiveTransitioning&lt;/code&gt;的对象。官方已经给我们封装好了一个&lt;code&gt;UIPercentDrivenInteractiveTransition&lt;/code&gt;类，我们只要继承这个类在加入我们自己的一些内容就可以实现交互式转场。有几个方法我们需要先知道：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 更新转场状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateInteractiveTransition:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)percentComplete;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 取消转场&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)cancelInteractiveTransition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 完成转场&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)finishInteractiveTransition;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，在转场发生时，如果返回了&lt;code&gt;交互控制器&lt;/code&gt;，但是却没有通过交互的方式来执行转场，那么整个过程就卡住。所以我们需要给交互控制器添加一个属性，用来监听当前是否是通过手势驱动，如果不是我们就返回一个 nil，这样就不会执行交互式转场，而只会执行普通的动画转场。接下来我们来看一下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// InteractionController.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InteractionController&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIPercentDrivenInteractiveTransition&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 标记是否是交互转场&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;, getter=isInteracting)&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; interacting;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 一些初始化工作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)prepareForViewController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)viewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// InteractionController.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InteractionController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *presentedVC;	&lt;span class=&quot;comment&quot;&gt;// 注意是弱引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; shouldComplete;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InteractionController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 给 viewController 的 view 添加手势&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)prepareForViewController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)viewController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _presentedVC = viewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *panGesture = [[&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(panGestureAction:)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [viewController.view addGestureRecognizer:panGesture];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)panGestureAction:(&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *)gestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; translation = [gestureRecognizer translationInView:gestureRecognizer.view.superview];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 动画的百分比&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; percent = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (gestureRecognizer.state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateBegan&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 设置交互状态为 YES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _interacting = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 手势开始时要调用 dismiss&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [_presentedVC dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateChanged&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 计算百分比&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            percent = -translation.y/_presentedVC.view.bounds.size.height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 更新转场的进度 传入的参数值要在 0.0~1.0 之间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; updateInteractiveTransition:percent];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 如果滑动超过 30% 就视为转场完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _shouldComplete = (percent &amp;gt; &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateCancelled&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _interacting = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; cancelInteractiveTransition];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateEnded&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _interacting = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_shouldComplete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; finishInteractiveTransition];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; cancelInteractiveTransition];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注释已经写得很详细了，需要注意的是在完成或者取消的时候一定要调用对应的方法来通知系统。完成了这个类后我们需要再次修改 &lt;code&gt;PresentingViewController&lt;/code&gt;的内容。    &lt;/p&gt;
&lt;p&gt;再添加一个属性&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;)InteractionController *interactiveTransition;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并且在&lt;code&gt;- (void)viewDidLoad&lt;/code&gt;中初始化它&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 初始化交互控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _interactiveTransition = [InteractionController new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;- (void)buttonClicked&lt;/code&gt;中执行&lt;code&gt;- (void)prepareForViewController:(UIViewController *)viewController&lt;/code&gt;方法&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)buttonClicked &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 添加交互&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_interactiveTransition prepareForViewController:presentedVC];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; presentViewController:presentedVC animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在最后添加协议方法,在方法中要通过 &lt;code&gt;isInteracting&lt;/code&gt; 属性来判断是否是执行交互式转场，如果不是则返回 &lt;code&gt;nil&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回 dismiss 的交互控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerInteractiveTransitioning&lt;/span&gt;&amp;gt;)interactionControllerForDismissal:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animator &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _interactiveTransition.isInteracting ? _interactiveTransition : &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于普通的 view controller 的自定义转场就到此结束了。如果你按照文章的步骤一步一步写下来，相信你已经完成了一个最简单的自定义转场。&lt;/p&gt;
&lt;h2 id=&quot;容器-view-controller-的自定义转场&quot;&gt;&lt;a href=&quot;#容器-view-controller-的自定义转场&quot; class=&quot;headerlink&quot; title=&quot;容器 view controller 的自定义转场&quot;&gt;&lt;/a&gt;容器 view controller 的自定义转场&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;UINavigationController&lt;/code&gt;，&lt;code&gt;UITabBarController&lt;/code&gt; 都属于 容器VC。与普通的 VC 不同的是，它们通过 &lt;code&gt;UINavigationControllerDelegate&lt;/code&gt;或者&lt;code&gt;UITabBarControllerDelegate&lt;/code&gt;的代理方法来返回&lt;code&gt;动画控制器&lt;/code&gt;，而动画控制器的具体实现，几乎是一模一样的。我放在 &lt;a href=&quot;https://github.com/Hcy91425/Demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github 上的 Demo&lt;/a&gt; 中，有这三种自定转场的代码，用的基本上是同一个 animationController ，如果你掌握了前面的内容，那么这里也就不是问题了。具体的代码我就不展开了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/heading-customTransition.png&quot;&gt;&lt;/div&gt;

&lt;p&gt;这两天学习了一下自定义转场动画的内容，刚开始看的时候被这几个又长又很相似的协议弄的晕头转向，所以希望能写一篇浅显易懂的入门文章。本文的内容会比较基础，不会涉及的很深的，就像题目说的&lt;code&gt;初窥&lt;/code&gt;。通过本文可以用最简单的方式实现最简单的自定义转场动画。如果你需要更加深入的知识，可以参考官方文档。&lt;/p&gt;
    
    </summary>
    
      <category term="UIKit 学习" scheme="http://yoursite.com/categories/UIKit-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="自定义转场" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 块（Block）的使用与理解</title>
    <link href="http://yoursite.com/2016/03/13/Objective-C-%E5%9D%97%EF%BC%88Block%EF%BC%89%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/03/13/Objective-C-块（Block）的使用与理解/</id>
    <published>2016-03-13T08:33:30.000Z</published>
    <updated>2016-03-30T02:24:43.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrad5.com1.z0.glb.clouddn.com/heading_block.png&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;块（Block）是在 iOS 开发中很常用的一个工具，它可以使我们代码的业务逻辑更加的紧凑。本文会分两部分来讲块，第一部分是块的基础知识，第二部分是对块的本质的一些理解。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;块的基础知识&quot;&gt;&lt;a href=&quot;#块的基础知识&quot; class=&quot;headerlink&quot; title=&quot;块的基础知识&quot;&gt;&lt;/a&gt;块的基础知识&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;块的声明&quot;&gt;&lt;a href=&quot;#块的声明&quot; class=&quot;headerlink&quot; title=&quot;块的声明&quot;&gt;&lt;/a&gt;块的声明&lt;/h3&gt;&lt;p&gt;块的声明类似于函数指针，只不过把 * 换成了 ^ 。声明时最前面是返回类型，中间是块名，最后是参数类型。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// returnType (^blockName) (parameters)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (^someBlock) (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;块的实现&quot;&gt;&lt;a href=&quot;#块的实现&quot; class=&quot;headerlink&quot; title=&quot;块的实现&quot;&gt;&lt;/a&gt;块的实现&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ^returnType(parameters)&amp;#123;/*code*/&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中返回值是可以省略的,它可以自动判断，如果参数也是空的话我们可以简化成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;块的使用&quot;&gt;&lt;a href=&quot;#块的使用&quot; class=&quot;headerlink&quot; title=&quot;块的使用&quot;&gt;&lt;/a&gt;块的使用&lt;/h3&gt;&lt;p&gt;块的使用就像使用 C 函数一样&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;someBlock（&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;，&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;）;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用-typedef-来简化块的声明&quot;&gt;&lt;a href=&quot;#用-typedef-来简化块的声明&quot; class=&quot;headerlink&quot; title=&quot;用 typedef 来简化块的声明&quot;&gt;&lt;/a&gt;用 typedef 来简化块的声明&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (^CYAddBlock) (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CYAddBlock addBlock = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addBlock(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;块能捕获在它声明范围里的所有变量&quot;&gt;&lt;a href=&quot;#块能捕获在它声明范围里的所有变量&quot; class=&quot;headerlink&quot; title=&quot;块能捕获在它声明范围里的所有变量&quot;&gt;&lt;/a&gt;块能捕获在它声明范围里的所有变量&lt;/h3&gt;&lt;p&gt;但是不能再块中修改捕获到的变量，如果我们尝试修改编译器会报错，无法通过编译。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (^someBlock) () = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; result = someBlock();	&lt;span class=&quot;comment&quot;&gt;// result = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用-block-修饰变量，可以在块中修改变量的值&quot;&gt;&lt;a href=&quot;#用-block-修饰变量，可以在块中修改变量的值&quot; class=&quot;headerlink&quot; title=&quot;用 __block 修饰变量，可以在块中修改变量的值&quot;&gt;&lt;/a&gt;用 __block 修饰变量，可以在块中修改变量的值&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__block &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (^someBlock) () = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ++count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; result = someBlock();	&lt;span class=&quot;comment&quot;&gt;// result = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实块在捕获变量时只是拷贝了一份变量的值，而用 __block 修饰后，拷贝的是变量的地址，所以我们就可以在块中修改变量了。这就和 C 语言中函数的参数是类似的道理。&lt;/p&gt;
&lt;h3 id=&quot;小心产生循环引用&quot;&gt;&lt;a href=&quot;#小心产生循环引用&quot; class=&quot;headerlink&quot; title=&quot;小心产生循环引用&quot;&gt;&lt;/a&gt;小心产生循环引用&lt;/h3&gt;&lt;p&gt;在一个类中，块能直接访问并修改实例变量的值，但是一定要注意不管是通过 self 来访问属性还是直接通过 _instanceVariable 来访问&lt;strong&gt;都会捕获 self&lt;/strong&gt;。因为在直接访问 _instanceVariable 等效于这样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;-&amp;gt;_instanceVariable;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而一旦捕获了self， 我们就一定要注意&lt;strong&gt;循环引用&lt;/strong&gt;导致的内存泄露了。我们在 CYClass 中声明了一个块和一个属性：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^CYBlock) ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CYClass&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *aString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)CYBlock aBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后重写它的 init 和 dealloc 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CYClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _aString = &lt;span class=&quot;string&quot;&gt;@&quot;Hello Cyrus&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _aBlock = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, _aString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;CYClass deinit&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们实例化一个对象，紧接着就把它设为 nil 会发现 dealloc 方法并没有被调用，也就是说发生了内存泄露。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CYClass *c = [CYClass new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以通过 __weak 来打破这个循环，我们修改一下初始化方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _aString = &lt;span class=&quot;string&quot;&gt;@&quot;Hello Cyrus&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) weakSelf = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _aBlock = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	__&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) strongSelf = weakSelf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, strongSelf.aString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在执行之前的代码就会发现这个对象成功的销毁了。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24.995&lt;/span&gt; BlockExample[&lt;span class=&quot;number&quot;&gt;4777&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;111670&lt;/span&gt;] CYClass deinit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;块的本质&quot;&gt;&lt;a href=&quot;#块的本质&quot; class=&quot;headerlink&quot; title=&quot;块的本质&quot;&gt;&lt;/a&gt;块的本质&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;块的结构&quot;&gt;&lt;a href=&quot;#块的结构&quot; class=&quot;headerlink&quot; title=&quot;块的结构&quot;&gt;&lt;/a&gt;块的结构&lt;/h3&gt;&lt;p&gt;我们可以在&lt;a href=&quot;https://llvm.org/svn/llvm-project/compiler-rt/tags/Apple/Libcompiler_rt-10/BlocksRuntime/Block_private.h&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;找到 Block 的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Block_descriptor &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; reserved;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *dst, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *src);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*dispose)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Block_layout &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *isa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; reserved; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*invoke)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *, ...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Block_descriptor *descriptor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Imported variables. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到 Block_layout 结构体里的第一个变量是一个 &lt;strong&gt;isa 指针&lt;/strong&gt;， 我们应该就能猜到 &lt;strong&gt;Block 也是一个对象&lt;/strong&gt;。然后再看第四个变量是一个叫 &lt;strong&gt;invoke 的函数指针&lt;/strong&gt;，它指向的就是 &lt;strong&gt;Block 具体实现的函数&lt;/strong&gt;了,这个函数至少要接受一个 void*  类型的参数，这个参数就是块本身。再下面的 descriptor 指向的就是 Block_descriptor 结构体，里面就是一些 Block 的信息。而在这些变量下面存放的就是 &lt;strong&gt;Block 捕获的那些变量&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;块的类型&quot;&gt;&lt;a href=&quot;#块的类型&quot; class=&quot;headerlink&quot; title=&quot;块的类型&quot;&gt;&lt;/a&gt;块的类型&lt;/h3&gt;&lt;p&gt;在 OC 中一共有3种块，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局块，不会访问任何外部变量&lt;/li&gt;
&lt;li&gt;栈块，保存在栈中, 当函数退出后就会被销毁，通过copy可以复制到堆上&lt;/li&gt;
&lt;li&gt;堆块，保存在堆中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们在 MRC 的环境下运行下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^globalBlock)()  = ^&amp;#123; &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;global block&quot;&lt;/span&gt;); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, globalBlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str1 = &lt;span class=&quot;string&quot;&gt;@&quot;stack block&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^stackBlcok)() = ^&amp;#123; &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, str1); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, stackBlcok);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str2 = &lt;span class=&quot;string&quot;&gt;@&quot;malloc block&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^mallockBlock)() = [^&amp;#123; &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, str2); &amp;#125; &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, mallockBlock);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印结果：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50.676&lt;/span&gt; BlockExample[&lt;span class=&quot;number&quot;&gt;1760&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;28902&lt;/span&gt;] &amp;lt;__&lt;span class=&quot;built_in&quot;&gt;NSGlobalBlock__&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0x1000042b0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50.677&lt;/span&gt; BlockExample[&lt;span class=&quot;number&quot;&gt;1760&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;28902&lt;/span&gt;] &amp;lt;__&lt;span class=&quot;built_in&quot;&gt;NSStackBlock__&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0x7fff5fbff790&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50.677&lt;/span&gt; BlockExample[&lt;span class=&quot;number&quot;&gt;1760&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;28902&lt;/span&gt;] &amp;lt;__&lt;span class=&quot;built_in&quot;&gt;NSMallocBlock__&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0x100303fa0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果和我们预期的结果是一样的。我们在换成 ARC 的环境下运行一次：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;05.767&lt;/span&gt; BlockExample[&lt;span class=&quot;number&quot;&gt;1805&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29822&lt;/span&gt;] &amp;lt;__&lt;span class=&quot;built_in&quot;&gt;NSGlobalBlock__&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0x1000052f0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;05.768&lt;/span&gt; BlockExample[&lt;span class=&quot;number&quot;&gt;1805&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29822&lt;/span&gt;] &amp;lt;__&lt;span class=&quot;built_in&quot;&gt;NSMallocBlock__&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0x100400340&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;05.769&lt;/span&gt; BlockExample[&lt;span class=&quot;number&quot;&gt;1805&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29822&lt;/span&gt;] &amp;lt;__&lt;span class=&quot;built_in&quot;&gt;NSMallocBlock__&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0x1004001b0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们发现原来的栈块也变成了堆块。这是因为在把一个快赋值给一个strong对象时 ARC 会自动帮我们执行一次copy。如果我们直接这样，那么还是会打印出 __NSStackBlock :&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str1 = &lt;span class=&quot;string&quot;&gt;@&quot;stack block&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, ^&amp;#123; &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, str1); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;06.180&lt;/span&gt; BlockExample[&lt;span class=&quot;number&quot;&gt;1881&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;32260&lt;/span&gt;] &amp;lt;__&lt;span class=&quot;built_in&quot;&gt;NSStackBlock__&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0x7fff5fbff798&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrad5.com1.z0.glb.clouddn.com/heading_block.png&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;块（Block）是在 iOS 开发中很常用的一个工具，它可以使我们代码的业务逻辑更加的紧凑。本文会分两部分来讲块，第一部分是块的基础知识，第二部分是对块的本质的一些理解。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C 学习" scheme="http://yoursite.com/categories/Objective-C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Block" scheme="http://yoursite.com/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C runtime 的简单理解与使用（二）</title>
    <link href="http://yoursite.com/2016/03/11/Objective-C-runtime-%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2016/03/11/Objective-C-runtime-的简单理解与使用（二）/</id>
    <published>2016-03-11T12:04:06.000Z</published>
    <updated>2016-03-24T03:30:02.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrad5.com1.z0.glb.clouddn.com/heading_runtime2.png&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在我们知道了 Objective-C 中类的本质，以及它的消息分发机制后，我们就可以来看看那些与 runtime 相关的的函数了。当然，我们只会讲比较常见的那些。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;关联对象（Associated-Object）&quot;&gt;&lt;a href=&quot;#关联对象（Associated-Object）&quot; class=&quot;headerlink&quot; title=&quot;关联对象（Associated Object）&quot;&gt;&lt;/a&gt;关联对象（Associated Object）&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;关联对象，顾名思义，就是给某对象关联许多其他的对象。这些对象通过 key 来区分。&lt;/p&gt;
&lt;p&gt;与关联对象相关的函数有三个：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; object, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value, objc_AssociationPolicy policy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_getAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; object, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_removeAssociatedObjects(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; object);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从函数名我们也可以看出来，这三个函数分别是用来设置，获取和移除关联对象的。这里要解释一下的是他们的参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数 id object 显然就是你要设置关联对象的那个对象。&lt;/li&gt;
&lt;li&gt;第二个参数 const void *key 就是用来区分不同的关联对象的 key，因为想让两个 key 匹配到同一个关联对象就必须是完全相等的指针，所以我们一般用静态全局变量来作为 key。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *AssociatedKey = &lt;span class=&quot;string&quot;&gt;&quot;AssociatedKey&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;第三个参数 id value 就是要关联的对象了。&lt;/li&gt;
&lt;li&gt;第四个参数 objc_AssociationPolicy policy 指的是关联对象的存储策略，它是一个枚举，可以与 property 的 attribute 相对应：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_ASSIGN&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,						 &lt;span class=&quot;comment&quot;&gt;// assign&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_RETAIN_NONATOMIC&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,			   &lt;span class=&quot;comment&quot;&gt;// nonatomic, retain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_COPY_NONATOMIC&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,				 &lt;span class=&quot;comment&quot;&gt;// nonatomic, copy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_RETAIN&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;01401&lt;/span&gt;,					 &lt;span class=&quot;comment&quot;&gt;// retain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_COPY&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;01403&lt;/span&gt;						&lt;span class=&quot;comment&quot;&gt;// copy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大家知道，在 category 中，我们无法添加 property，因为无法添加实例变量。那么，我们现在就可以通过关联对象来实现在 category 中添加属性的功能了。&lt;/p&gt;
&lt;p&gt;我们现在 CYClass 类的拓展中声明了一个属性&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CYClass&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Property&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *aString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果这个时候我们直接在外部访问这个属性， 那个程序是会 crash 的，不信你可以试试😅，编译器会说：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&#39;-[CYClass setAString:]: unrecognized selector sent to instance 0x1001060a0&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以我们给它加上 setter 和 getter 方法， 并且在这两个方法中给它设置关联对象：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *aStringKey = &lt;span class=&quot;string&quot;&gt;&quot;aStringKey&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CYClass&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Property&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setAString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)newString&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, aStringKey, newString, OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_COPY_NONATOMIC&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)aString&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; objc_getAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, aStringKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们再进行读写操作，程序就不会 crash 了。当然，没有必要的情况下，还是不要滥用关联对象， 否则有可能会出现一些难以发现的bug。&lt;br&gt;&lt;!-- more --&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法调配（Method-Swizzling）&quot;&gt;&lt;a href=&quot;#方法调配（Method-Swizzling）&quot; class=&quot;headerlink&quot; title=&quot;方法调配（Method Swizzling）&quot;&gt;&lt;/a&gt;方法调配（Method Swizzling）&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在前一篇博客中我们知道了每个类中的方法是以 objc_method 结构体的形式放在 methodLists 中的。每一个 selector 对应了一个实现的函数的指针 IMP。而 method swizzling 技术就是通过交换这个函数指针来实现的。&lt;/p&gt;
&lt;p&gt;我们最好在 +load 方法中使用 method swizzling，因为 +load 方法对于加入运行期中的每个类及分类都会调用且只调用一次。所以在这里交换方法是最安全的。&lt;/p&gt;
&lt;p&gt;我们来看一下苹果为我们提供了哪些API来实现 method swizzling：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IMP class_replaceMethod(Class cls, SEL name, IMP imp, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *types);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以直接替换方法，当需要的方法不存在时，会先调用 class_addMethod 来添加一个新的方法。会返回替换前的实现函数指针 。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Method class_getInstanceMethod(Class cls, SEL name);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据类和 selector 得到 method，用来作为下面两个方法的参数。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IMP method_setImplementation(Method m, IMP imp);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直接为一个方法设置它的实现，返回之前的实现函数指针&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; method_exchangeImplementations(Method m1, Method m2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;交换两个方法的实现，实际上就是调用了两次 method_setImplementation，并且是线程安全的。&lt;/p&gt;
&lt;p&gt;我们用 method_exchangeImplementations 来简单的尝试一下 method swizzling，我添加了一个 NSString 的分类，用我自己的方法交换了系统的 lowercaseString 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSString&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Swizzling&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method originalMethod = class_getInstanceMethod([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(lowercaseString));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method swappedMthod = class_getInstanceMethod([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(swizzle_lowercaseString));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    method_exchangeImplementations(originalMethod, swappedMthod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)swizzle_lowercaseString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *lowercase = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; swizzle_lowercaseString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;FROM: %@  TO:  %@&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, lowercase);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lowercase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可能有人会觉得在自己新写的 swizzle_lowercaseString 方法中又调用 [self swizzle_lowercaseString] 会导致死循环，其实在交换了方法以后我们调用原来的 lowercaseString 方法就会进入这个方法的实现，而这时候调用 swizzle_lowercaseString 其实调用的是系统原来的方法，所以是不会产生死循环的。这里理解起来可能有点奇怪。&lt;/p&gt;
&lt;p&gt;我们在看一下调用的结果&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;05.645&lt;/span&gt; Example[&lt;span class=&quot;number&quot;&gt;4129&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;101067&lt;/span&gt;] FROM: Hello World  TO:  hello world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然 method swizzling 是一把双刃剑，我们可以用它来进行黑盒测试，在真正的项目中如果用 method swizzling 一定要格外小心。&lt;/p&gt;
&lt;h2 id=&quot;消息转发机制（Message-Forwarding）&quot;&gt;&lt;a href=&quot;#消息转发机制（Message-Forwarding）&quot; class=&quot;headerlink&quot; title=&quot;消息转发机制（Message Forwarding）&quot;&gt;&lt;/a&gt;消息转发机制（Message Forwarding）&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;当我们的对象接收到一个无法解读的消息时，就会进入消息转发。消息转发分为两大阶段，第一阶段是动态方法解析，第二阶段是完整的消息转发。&lt;/p&gt;
&lt;h3 id=&quot;动态方法解析（dynamic-method-resolution）&quot;&gt;&lt;a href=&quot;#动态方法解析（dynamic-method-resolution）&quot; class=&quot;headerlink&quot; title=&quot;动态方法解析（dynamic method resolution）&quot;&gt;&lt;/a&gt;动态方法解析（dynamic method resolution）&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;要实现动态方法解析只要重写两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)resolveInstanceMethod:(SEL)sel; &lt;span class=&quot;comment&quot;&gt;// 处理无法识别的实例方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)resolveClassMethod:(SEL)sel;    &lt;span class=&quot;comment&quot;&gt;// 处理无法识别的类方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个方法传进来的参数 selector 就是那个无法解析的方法，我们可以根据这个 selector 来动态的为这个类添加方法。比如像下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; dynamicMethod(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL _cmd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CYClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)resolveInstanceMethod:(SEL)sel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sel == &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(someSelector)) &amp;#123;       &lt;span class=&quot;comment&quot;&gt;// 对selector做一些逻辑判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        class_addMethod([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], sel, (IMP)dynamicMethod, &lt;span class=&quot;string&quot;&gt;&quot;v@:&quot;&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;// 为类添加方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还要提一下 class_addMethod 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class_addMethod(__unsafe_unretained Class cls, SEL name, IMP imp, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *types);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它的最后一个参数是用来描述这个函数的返回值和参数类型的，称之为 类型编码（Type Encoding）。在前面那个例子里的 “v@:” 中， v 表示返回值为 void， @ 表示第一个参数是 id， ： 表示第二个参数类型是 SEL 。&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更多的类型编码可以看这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当 resolveInstanceMethod: 返回 NO 时，就会进入消息转发的第二阶段 完整的消息转发机制。&lt;/p&gt;
&lt;h3 id=&quot;完整的消息转发机制&quot;&gt;&lt;a href=&quot;#完整的消息转发机制&quot; class=&quot;headerlink&quot; title=&quot;完整的消息转发机制&quot;&gt;&lt;/a&gt;完整的消息转发机制&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;完整的消息转发主要涉及两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)forwardingTargetForSelector:(SEL)aSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)forwardInvocation:(&lt;span class=&quot;built_in&quot;&gt;NSInvocation&lt;/span&gt; *)anInvocation;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在 + resolveInstanceMethod: 方法中返回了 NO 那么就会执行 - forwardingTargetForSelector: 方法。在这个方法内我们可以给对象返回一个备援的接受者来处理这个位置的信息。在 CYClass 的实现中我们这么写：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CYClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)forwardingTargetForSelector:(SEL)aSelector &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (aSelector == &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(unrecognizedSel)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [AnotherClass new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; forwardingTargetForSelector:aSelector];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AnotherClass 的实例就是我们用来作为备援接受者的对象，我们在 AnotherClass 中实现了 unrecognizedSel 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnotherClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)unrecognizedSel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;forwarding target for unrecognized selector in AnotherClass&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们再给 CYClass 的实例发送 unrecognizedSel 的消息就不会 crash 了：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CYClass *c = [CYClass new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[c performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(unrecognizedSel)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;46&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;30.608&lt;/span&gt; example[&lt;span class=&quot;number&quot;&gt;1577&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19943&lt;/span&gt;] forwarding target &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; unrecognized selector &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; AnotherClass&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果这一步我们也没有提供一个备援的接收者，那么就会进入最后一步 - forwardInvocation: 方法，系统会把所有与那条消息相关的信息全部封装在一个 NSInvocation 对象中，我们可以在直接改变调用的目标， 也可以修改消息的内容后再进行转发。我们把前一个方法去掉，然后重写一下 - forwardInvocation: 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CYClass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSMethodSignature&lt;/span&gt; *)methodSignatureForSelector:(SEL)aSelector &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSMethodSignature&lt;/span&gt; signatureWithObjCTypes:&lt;span class=&quot;string&quot;&gt;&quot;v@:&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)forwardInvocation:(&lt;span class=&quot;built_in&quot;&gt;NSInvocation&lt;/span&gt; *)anInvocation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SEL sel = [anInvocation selector];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sel == &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(unrecognizedSel)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [anInvocation invokeWithTarget:[AnotherClass new]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; forwardInvocation: anInvocation];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是我们还要重写- methodSignatureForSelector: 方法，因为生成 NSInvocation 对象会调用到这个方法，否则会抛出异常。关于 forwardInvocation 了解的还不是很多，所以例子比较简单，以后有了更深的理解后会再加上。&lt;/p&gt;
&lt;h3 id=&quot;消息转发的全过程&quot;&gt;&lt;a href=&quot;#消息转发的全过程&quot; class=&quot;headerlink&quot; title=&quot;消息转发的全过程&quot;&gt;&lt;/a&gt;消息转发的全过程&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;到这里对于 runtime 的简单理解与使用就基本结束了。总的来说，理解了 Objective-C 的运行时会让我们的代码更加灵活，当然也会增大维护的难度。不过想要学好 Objective-C 这门语言，runtime 是必不可少的！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrad5.com1.z0.glb.clouddn.com/heading_runtime2.png&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在我们知道了 Objective-C 中类的本质，以及它的消息分发机制后，我们就可以来看看那些与 runtime 相关的的函数了。当然，我们只会讲比较常见的那些。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C 学习" scheme="http://yoursite.com/categories/Objective-C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="runtime" scheme="http://yoursite.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C runtime 的简单理解与使用（一）</title>
    <link href="http://yoursite.com/2016/03/10/Objective-C-runtime-%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2016/03/10/Objective-C-runtime-的简单理解与使用（一）/</id>
    <published>2016-03-10T11:49:34.000Z</published>
    <updated>2016-03-24T03:30:09.000Z</updated>
    
    <content type="html">&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrad5.com1.z0.glb.clouddn.com/heading_runtime1.png&quot;&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;一开始接触 iOS 的时候，学的是 Swift。还有一个学期就大四，为了实习，也为了更好的理解 iOS，最近一个多月开始正式学习 Objective-C。而 runtime “运行时” 应该算是 Objective-C 的核心所在。我觉得有必要好好来理解一下 runtime。学的还不是很精，主要是通过看别人的博客和《Effective Objective-C 2.0》这本书来学习 runtime ，官方文档还没有看过，希望以后能够补上。如果有什么理解的不对的地方，希望大家指出。😆&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;                
&lt;h2 id=&quot;Objective-C中的消息分发&quot;&gt;&lt;a href=&quot;#Objective-C中的消息分发&quot; class=&quot;headerlink&quot; title=&quot;Objective-C中的消息分发&quot;&gt;&lt;/a&gt;Objective-C中的消息分发&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[someObject doSomething];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是我们在 Objective-C 中调用方法的方式， 但其实这应该称作&lt;strong&gt;“传递消息”（pass a message）&lt;/strong&gt;，给 someObject 对象传递一个 doSomething的消息。因为这行代码在编译时会变成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;objc_msgSend(someObject, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(doSomething))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是个 C 函数， 声明在 objc/message.h 头文件中，它接受两个及以上的可变参数, 第一个参数代表的是消息的接收者，第二个参数代表选择子（&lt;a href=&quot;#selector&quot;&gt;selector，在后面我们会细说&lt;/a&gt;），如果要调用的方法还有别的参数，就会跟在这两个参数后面。还有其他几个类似的函数，来处理不同的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; objc_msgSend(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL op, ...)	&lt;span class=&quot;comment&quot;&gt;// 直接发送消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; objc_msgSendSuper(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_super *&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;, SEL op, ...)	&lt;span class=&quot;comment&quot;&gt;// 给父类发送消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; objc_msgSend_stret(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL op, ...)	&lt;span class=&quot;comment&quot;&gt;// 返回值是结构体时，可以交给这个函数处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; objc_msgSend_fpret(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL op, ...)	&lt;span class=&quot;comment&quot;&gt;// 返回值是浮点数时，可以交给这个函数处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们向一个对象发送一个消息时，它会在这个对象的类中根据 selector 找到真正的实现函数，如果找不到就再到它的父类中找，一层一层的找上去，最后到 NSObject 类中， 如果还没有找到，那么就会启用“消息转发机制”。这个我们以后再提。&lt;/p&gt;
&lt;h4 id=&quot;消息分发图示&quot;&gt;&lt;a href=&quot;#消息分发图示&quot; class=&quot;headerlink&quot; title=&quot;消息分发图示&quot;&gt;&lt;/a&gt;消息分发图示&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/messaging1.gif&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Objective-C中类的本质&quot;&gt;&lt;a href=&quot;#Objective-C中类的本质&quot; class=&quot;headerlink&quot; title=&quot;Objective-C中类的本质&quot;&gt;&lt;/a&gt;Objective-C中类的本质&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Objective-C 中的类其实是 C 中的结构体，它的基本定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_class &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class isa ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class super_class ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *name ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; version ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; info ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; instance_size ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_ivar_list *ivars ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_method_list **methodLists ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_cache *cache ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_protocol_list *protocols ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Use `Class` instead of `struct objc_class *` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们来看一下其中比较重要的几个变量&lt;/p&gt;
&lt;h3 id=&quot;Class-isa&quot;&gt;&lt;a href=&quot;#Class-isa&quot; class=&quot;headerlink&quot; title=&quot;Class isa&quot;&gt;&lt;/a&gt;Class isa&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;isa 指针，表示这个对象是一个什么类。而 &lt;strong&gt;Class&lt;/strong&gt; 类型， 也就是 &lt;strong&gt;struct objc_class *&lt;/strong&gt; ，这是苹果在下面的注释中写到的。这说明类本身也是一个对象。在类对象中的 isa 指向的类叫做&lt;strong&gt;“元类”&lt;/strong&gt;，类方法就定义在元类中。&lt;br&gt;总的来说就是，一个类可以有很多的实例，这些实例有着唯一的一个类对象，而这个类对象也有着唯一的一个元类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;实例，类，父类，元类之间的关系&quot;&gt;&lt;a href=&quot;#实例，类，父类，元类之间的关系&quot; class=&quot;headerlink&quot; title=&quot;实例，类，父类，元类之间的关系&quot;&gt;&lt;/a&gt;实例，类，父类，元类之间的关系&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xrpns.com1.z0.glb.clouddn.com/%E7%B1%BB%E5%92%8C%E5%85%83%E7%B1%BB.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Class-super-class&quot;&gt;&lt;a href=&quot;#Class-super-class&quot; class=&quot;headerlink&quot; title=&quot;Class super_class&quot;&gt;&lt;/a&gt;Class super_class&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;super_class 指向的就是它的父类。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;struct-objc-ivar-list-ivars&quot;&gt;&lt;a href=&quot;#struct-objc-ivar-list-ivars&quot; class=&quot;headerlink&quot; title=&quot;struct objc_ivar_list *ivars&quot;&gt;&lt;/a&gt;struct objc_ivar_list *ivars&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;ivars 指向的是成员变量的列表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span id=&quot;selector&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;struct-objc-method-list-methodLists&quot;&gt;&lt;a href=&quot;#struct-objc-method-list-methodLists&quot; class=&quot;headerlink&quot; title=&quot;struct objc_method_list **methodLists&quot;&gt;&lt;/a&gt;struct objc_method_list **methodLists&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;methodLists 指向的就是方法的列表。在 method_list 中存着 objc_method 类型的数组。而 objc_method 的定义如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_method &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SEL method_name ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *method_types ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP method_imp ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; (*IMP)(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, SEL, ...); 	&lt;span class=&quot;comment&quot;&gt;// IMP 就是一个函数指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;看到这个结构体， 我们应该就很明确 selector 的意义了。&lt;strong&gt;selector&lt;/strong&gt; 其实就是&lt;strong&gt;方法的一个标示&lt;/strong&gt;，而 &lt;strong&gt;method_imp&lt;/strong&gt; 指向的才是&lt;strong&gt;真正的函数实现&lt;/strong&gt;。当我们向对象发送消息后， runtime根据 selector 这个标示，在method_list中找到对应的 objc_method，取到真正的函数的地址，再执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;struct-objc-cache-cache&quot;&gt;&lt;a href=&quot;#struct-objc-cache-cache&quot; class=&quot;headerlink&quot; title=&quot;struct objc_cache *cache&quot;&gt;&lt;/a&gt;struct objc_cache *cache&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;cache 用来缓存最近调用过的的方法。 如果每次向对象发送消息都要遍历一遍方法列表那会很浪费时间， 所以会把最近调用过的方法放在缓存中。每一次发送消息时，会先查询缓存，缓存中找不到再去方法列表中找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;struct-objc-protocol-list-protocols&quot;&gt;&lt;a href=&quot;#struct-objc-protocol-list-protocols&quot; class=&quot;headerlink&quot; title=&quot;struct objc_protocol_list *protocols&quot;&gt;&lt;/a&gt;struct objc_protocol_list *protocols&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;protocols 指向协议列表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Runtime能做什么&quot;&gt;&lt;a href=&quot;#Runtime能做什么&quot; class=&quot;headerlink&quot; title=&quot;Runtime能做什么&quot;&gt;&lt;/a&gt;Runtime能做什么&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;动态的改变成员变量的值&lt;/li&gt;
&lt;li&gt;在运行时添加方法&lt;/li&gt;
&lt;li&gt;交换方法的实现&lt;/li&gt;
&lt;li&gt;给一个对象关联其他对象&lt;/li&gt;
&lt;li&gt;消息转发&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等等，许许多多我们想不到的功能&lt;/p&gt;
&lt;p&gt;runtime的使用在下一篇博客中再详细讲 ~&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://7xrad5.com1.z0.glb.clouddn.com/heading_runtime1.png&quot;&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;一开始接触 iOS 的时候，学的是 Swift。还有一个学期就大四，为了实习，也为了更好的理解 iOS，最近一个多月开始正式学习 Objective-C。而 runtime “运行时” 应该算是 Objective-C 的核心所在。我觉得有必要好好来理解一下 runtime。学的还不是很精，主要是通过看别人的博客和《Effective Objective-C 2.0》这本书来学习 runtime ，官方文档还没有看过，希望以后能够补上。如果有什么理解的不对的地方，希望大家指出。😆&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C 学习" scheme="http://yoursite.com/categories/Objective-C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="runtime" scheme="http://yoursite.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://yoursite.com/2016/03/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/03/10/第一篇博客/</id>
    <published>2016-03-10T03:04:16.000Z</published>
    <updated>2016-03-18T01:47:35.000Z</updated>
    
    <content type="html">&lt;p&gt;花了一个晚上加上一个上午的时间，终于把自己的博客搭起来了。以后要好好学习， 认真的写博客了。&lt;/p&gt;
&lt;p&gt;嗯， 第一篇博客就是这么简短，拜拜~ 😆&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;花了一个晚上加上一个上午的时间，终于把自己的博客搭起来了。以后要好好学习， 认真的写博客了。&lt;/p&gt;
&lt;p&gt;嗯， 第一篇博客就是这么简短，拜拜~ 😆&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
